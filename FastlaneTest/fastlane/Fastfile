platform :ios do
  desc "Load App Store Connect APi Key info for use in other lanes"
  lane :loadAscApiKey do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY"],
      is_key_content_base64: true,
      in_house: false
    )
    UI.message "Key: #{lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]}"
  end

  desc "Check certs and profiles"
  lane :prepare_signing do |options|
    app_id = "com.xemelgo.FastlaneTest"
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    profile_name = "Kmalby Fastlane"
    
    cert(
        api_key: api_key,
        keychain_path: ENV["KEYCHAIN_PATH"] # the path to the keychain where your certificates are stored
      )
    
    # main app profile
    sigh(
      api_key: api_key,
      app_identifier: app_id,
      provisioning_name: profile_name,
      force: true # always recreate this exact profile to ensure it's valid and not expired
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
    #fetch read your app identifier defined in your Appfile
    app_identifier = "com.xemelgo.FastlaneTest"
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    current_version = get_version_number(
      target: "FastlaneTest" # replace with your main target, required if you have more than one non-test target
    )
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )
    increment_build_number(
      build_number: (latest_build_number + 1),
    )
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = "com.xemelgo.FastlaneTest"
    
    profile_name = "Kmalby Fastlane" # the name of the profile to use for the build
    output_name = "fastlane-build" # specify the name of the .ipa file to generate
    export_method = "app-store" # specify the export method
    compile_bitcode = true # specify whether to enable bitcode
    
    # turn off automatic signing during build so correct code signing identity is guaranteed to be used
    update_code_signing_settings(
      use_automatic_signing: false,
      targets: ["FastlaneTest"], # specify which targets to update code signing settings for
      code_sign_identity: "iPhone Distribution", # replace with name of code signing identity if different
      bundle_identifier: app_identifier,
      profile_name: profile_name,
      build_configurations: ["Release"] # only toggle code signing settings for Release configurations
    )
    
    # build the app
    gym(
      scheme: "FatslaneTest", # replace with name of your projectâ€™s scheme
      output_name: output_name,
      configuration: "Release",
      export_options: {
        method: export_method,
        provisioningProfiles: {
          app_identifier => app_profile_name
        },
        compileBitcode: compile_bitcode
      }
    )
  end

  desc "Build and upload to TestFlight"
  lane :buildAndSign do
    loadAscApiKey
    prepare_signing
    fetch_and_increment_build_number
    build_release
   end
end

platform :android do
  desc "Cleans android folder"
  lane :prepareAndroid do
      gradle(task: 'clean', project_dir: './android')
  end

  desc "Updates the android version in the build.gradle file"
  lane :updateVersion do |options|
      newVersions = get_updated_version_android(app_version: options[:app_version], app_package_name: options[:app_package_name])
      increment_version_name(version_name: newVersions[0], gradle_file_path: './android/app/build.gradle')
      increment_version_code(version_code: newVersions[1], gradle_file_path: './android/app/build.gradle')
  end

  desc "Builds the aab file"
  lane :buildAab do |options|
      prepareAndroid
      updateVersion(app_version: options[:app_version], app_package_name: options[:app_package_name])
      gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
  end

  desc "Builds the apk file"
  lane :buildApk do |options|
      prepareAndroid
      updateVersion(app_version: options[:app_version], app_package_name: options[:app_package_name])
      gradle(task: 'assemble', build_type: 'Release', project_dir: './android')
  end

  desc "Uploads the build to TestFairy"
  lane :uploadToTestFairy do
    testfairy(api_key: ENV["TF_API_KEY"], apk: "./android/app/build/outputs/apk/release/app-release.apk")
  end

  desc "Builds and uploads binary for test"
  lane :buildAndUploadForTest do |options|
    buildApk(app_version: options[:app_version], app_package_name: options[:app_package_name])
    uploadToTestFairy
  end
end
